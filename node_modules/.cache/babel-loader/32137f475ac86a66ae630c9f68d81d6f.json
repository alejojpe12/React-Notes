{"ast":null,"code":"var _jsxFileName = \"/samba/Journal/src/routers/AppRouter.js\";\nimport { AuthRouter } from './AuthRouter';\nimport { JournalScreen } from '../components/journal/JournalScreen';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { loginGoogle, profilePhoto } from '../actions/auth';\nimport { PrivateRoute } from './PrivateRoute';\nimport { PublicRoute } from './PublicRoute';\nimport React, { useEffect, useState } from 'react';\nimport { firebase } from '../firebase/firebase-config';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\nimport { LoadingScreen } from '../components/journal/LoadingScreen';\nimport { startLoadingNotes } from '../actions/notes';\nexport const AppRouter = () => {\n  const dispatch = useDispatch();\n  const [checking, setChecking] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const {\n    getState\n  } = useStore();\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user === null || user === void 0 ? void 0 : user.uid) {\n        dispatch(loginGoogle(user.uid, user.displayName));\n        setIsLoggedIn(true);\n        dispatch(startLoadingNotes(user.uid));\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setChecking(false);\n    });\n  }, [dispatch, setChecking, setIsLoggedIn, getState]);\n\n  if (checking) {\n    return /*#__PURE__*/React.createElement(LoadingScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PublicRoute, {\n    path: \"/react-notes/auth\",\n    component: AuthRouter,\n    isAuthenticated: isLoggedIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(PrivateRoute, {\n    exact: true,\n    isAuthenticated: isLoggedIn,\n    path: \"/react-notes\",\n    component: JournalScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/react-notes/auth/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }))));\n};","map":{"version":3,"sources":["/samba/Journal/src/routers/AppRouter.js"],"names":["AuthRouter","JournalScreen","useDispatch","useSelector","useStore","loginGoogle","profilePhoto","PrivateRoute","PublicRoute","React","useEffect","useState","firebase","BrowserRouter","Router","Switch","Redirect","LoadingScreen","startLoadingNotes","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","getState","auth","onAuthStateChanged","user","uid","displayName"],"mappings":";AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,QAAnC,QAAmD,aAAnD;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,iBAA1C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAwB,6BAAxB;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,MAFJ,EAGIC,QAHJ,QAIO,kBAJP;AAMA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAE3B,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AAGA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAACc,IAAAA;AAAD,MAAarB,QAAQ,EAA3B;AAEAM,EAAAA,SAAS,CAAC,MAAI;AAEVE,IAAAA,QAAQ,CAACc,IAAT,GAAgBC,kBAAhB,CAAoC,MAAOC,IAAP,IAAgB;AAEhD,UAAGA,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEC,GAAT,EAAc;AAEdT,QAAAA,QAAQ,CAAEf,WAAW,CAACuB,IAAI,CAACC,GAAN,EAAWD,IAAI,CAACE,WAAhB,CAAb,CAAR;AAEAN,QAAAA,aAAa,CAAE,IAAF,CAAb;AACAJ,QAAAA,QAAQ,CAACF,iBAAiB,CAACU,IAAI,CAACC,GAAN,CAAlB,CAAR;AAIH,OATG,MASG;AACHL,QAAAA,aAAa,CAAE,KAAF,CAAb;AACH;;AAGGF,MAAAA,WAAW,CAAC,KAAD,CAAX;AAEP,KAlBG;AAoBH,GAtBQ,EAsBN,CAACF,QAAD,EAAWE,WAAX,EAAwBE,aAAxB,EAAuCC,QAAvC,CAtBM,CAAT;;AAyBA,MAAGJ,QAAH,EAAa;AACT,wBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAED,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,mBADT;AAEI,IAAA,SAAS,EAAGrB,UAFhB;AAGI,IAAA,eAAe,EAAEuB,UAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI,oBAAC,YAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,eAAe,EAAEA,UAFrB;AAGI,IAAA,IAAI,EAAC,cAHT;AAII,IAAA,SAAS,EAAGtB,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAeA,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfA,CADJ,CADJ,CADJ;AAwBH,CAhEM","sourcesContent":["import { AuthRouter } from './AuthRouter'\r\nimport { JournalScreen } from '../components/journal/JournalScreen'\r\nimport { useDispatch, useSelector, useStore } from 'react-redux'\r\nimport { loginGoogle, profilePhoto } from '../actions/auth'\r\nimport { PrivateRoute } from './PrivateRoute'\r\nimport { PublicRoute } from './PublicRoute'\r\n\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport { firebase} from '../firebase/firebase-config'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n} from 'react-router-dom'\r\n\r\nimport { LoadingScreen } from '../components/journal/LoadingScreen'\r\nimport { startLoadingNotes } from '../actions/notes'\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n\r\n    const [checking, setChecking] = useState(true)\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\r\n    const {getState} = useStore()\r\n    \r\n    useEffect(()=>{\r\n        \r\n        firebase.auth().onAuthStateChanged( async (user) => {\r\n            \r\n            if(user?.uid) {                \r\n                \r\n            dispatch( loginGoogle(user.uid, user.displayName))\r\n\r\n            setIsLoggedIn( true );\r\n            dispatch(startLoadingNotes(user.uid));\r\n\r\n\r\n\r\n        } else {\r\n            setIsLoggedIn( false );\r\n        }\r\n\r\n\r\n            setChecking(false);\r\n\r\n    });\r\n    \r\n    }, [dispatch, setChecking, setIsLoggedIn, getState])\r\n\r\n    \r\n    if(checking) {\r\n        return(\r\n            <LoadingScreen />\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PublicRoute \r\n                        path=\"/react-notes/auth\"\r\n                        component={ AuthRouter }\r\n                        isAuthenticated={isLoggedIn}\r\n                    />\r\n\r\n                    <PrivateRoute \r\n                        exact\r\n                        isAuthenticated={isLoggedIn}\r\n                        path=\"/react-notes\"\r\n                        component={ JournalScreen }\r\n                        \r\n                    />\r\n\r\n                <Redirect to='/react-notes/auth/login'/>\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}