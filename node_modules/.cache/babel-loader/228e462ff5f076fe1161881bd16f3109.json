{"ast":null,"code":"import { types } from \"../types/types\";\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { startLoading, finishLoading } from \"./ui\";\nimport Swal from 'sweetalert2';\nimport { emptyNotes } from './notes';\nexport const login = (uid, displayName) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName\n  }\n});\nexport const loginGoogle = (uid, displayName, photoURL) => ({\n  type: types.loginGoogle,\n  payload: {\n    uid,\n    displayName,\n    photoURL\n  }\n});\nexport const startLoginEmailPassword = (email, password) => {\n  return dispatch => {\n    dispatch(startLoading());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n      dispatch(finishLoading());\n    }).catch(e => {\n      console.log(e);\n      dispatch(finishLoading());\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      const photo = \"user.photoURL\";\n      dispatch(loginGoogle(user.uid, user.displayName, photo));\n    });\n  };\n};\nexport const startLogout = () => {\n  return async (dispatch, getState) => {\n    await firebase.auth().signOut(); // const {notes} = getState()\n    // const {active, notes: note} = notes\n\n    dispatch(logout());\n    dispatch(emptyNotes());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["/samba/Journal/src/actions/auth.js"],"names":["types","firebase","googleAuthProvider","startLoading","finishLoading","Swal","emptyNotes","login","uid","displayName","type","payload","loginGoogle","photoURL","startLoginEmailPassword","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","catch","e","console","log","fire","message","startRegisterWithEmailPasswordName","name","createUserWithEmailAndPassword","updateProfile","startGoogleLogin","signInWithPopup","photo","startLogout","getState","signOut","logout"],"mappings":"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","sourcesContent":["import { types } from \"../types/types\"\r\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\r\nimport { startLoading, finishLoading } from \"./ui\";\r\nimport Swal from 'sweetalert2'\r\nimport { emptyNotes } from './notes'\r\n\r\nexport const login = (uid, displayName) => ({\r\n    type: types.login,\r\n    payload: {\r\n        uid,\r\n        displayName\r\n    }\r\n});\r\n\r\nexport const loginGoogle = (uid, displayName, photoURL) => ({\r\n    type: types.loginGoogle,\r\n    payload: {\r\n        uid,\r\n        displayName,\r\n        photoURL\r\n    }\r\n});\r\n\r\nexport const startLoginEmailPassword = (email, password) => {\r\n    return(dispatch) => {\r\n\r\n        dispatch(startLoading());\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n        .then( ({user})  => {\r\n            dispatch( login(user.uid, user.displayName))\r\n            dispatch(finishLoading());\r\n\r\n            \r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            dispatch(finishLoading());\r\n            Swal.fire('Error', e.message, 'error')\r\n\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const startRegisterWithEmailPasswordName = (email, password, name)=>{\r\n    return( dispatch ) => {\r\n        firebase.auth().createUserWithEmailAndPassword( email, password )\r\n            .then( async ({user}) => {\r\n                \r\n                await user.updateProfile({displayName: name})\r\n                \r\n                dispatch(\r\n                    login(user.uid, user.displayName)\r\n                )\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n                Swal.fire('Error', e.message, 'error')\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const startGoogleLogin=() => {\r\n    return(dispatch) => {\r\n        firebase.auth().signInWithPopup( googleAuthProvider )\r\n        \r\n        .then( ({user}) => {\r\n            const photo = \"user.photoURL\"\r\n            dispatch(\r\n                loginGoogle(user.uid, user.displayName, photo)\r\n            )  \r\n        })\r\n    }\r\n}\r\n\r\nexport const startLogout = () => {\r\n    return async(dispatch, getState) => {\r\n        await firebase.auth().signOut();\r\n        \r\n        // const {notes} = getState()\r\n        // const {active, notes: note} = notes\r\n        dispatch( logout() )\r\n        dispatch( emptyNotes() )\r\n    }\r\n}\r\n\r\nexport const logout = () =>({\r\n    type: types.logout\r\n})\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}