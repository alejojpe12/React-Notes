{"ast":null,"code":"import { types } from \"../types/types\";\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { startLoading, finishLoading } from \"./ui\";\nimport Swal from 'sweetalert2';\nimport { emptyNotes } from './notes';\nexport const login = (uid, displayName, photoURL) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName,\n    photoURL\n  }\n}); // export const startLoginEmailPassword = (email, password) => {\n//     return(dispatch) => {\n//         dispatch(startLoading());\n//         firebase.auth().signInWithEmailAndPassword(email, password)\n//         .then( ({user})  => {\n//             dispatch( login(user.uid, user.displayName))\n//             dispatch(finishLoading());\n//         })\n//         .catch(e => {\n//             console.log(e);\n//             dispatch(finishLoading());\n//             Swal.fire('Error', e.message, 'error')\n//         })\n//     }\n// }\n\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(state => {\n      console.log(state);\n    });\n  };\n};\nexport const startLogout = () => {\n  return async (dispatch, getState) => {\n    await firebase.auth().signOut(); // const {notes} = getState()\n    // const {active, notes: note} = notes\n\n    dispatch(logout());\n    dispatch(emptyNotes());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["/samba/Journal/src/actions/auth.js"],"names":["types","firebase","googleAuthProvider","startLoading","finishLoading","Swal","emptyNotes","login","uid","displayName","photoURL","type","payload","startRegisterWithEmailPasswordName","email","password","name","dispatch","auth","createUserWithEmailAndPassword","then","user","updateProfile","catch","e","console","log","fire","message","startGoogleLogin","signInWithPopup","state","startLogout","getState","signOut","logout"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,6BAA7C;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,MAA5C;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,WAAN,EAAmBC,QAAnB,MAAiC;AAClDC,EAAAA,IAAI,EAAEX,KAAK,CAACO,KADsC;AAElDK,EAAAA,OAAO,EAAE;AACLJ,IAAAA,GADK;AAELC,IAAAA,WAFK;AAGLC,IAAAA;AAHK;AAFyC,CAAjC,CAAd,C,CAUP;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;;AAEA,OAAO,MAAMG,kCAAkC,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAAyB;AACvE,SAAQC,QAAF,IAAgB;AAClBhB,IAAAA,QAAQ,CAACiB,IAAT,GAAgBC,8BAAhB,CAAgDL,KAAhD,EAAuDC,QAAvD,EACKK,IADL,CACW,OAAO;AAACC,MAAAA;AAAD,KAAP,KAAkB;AAErB,YAAMA,IAAI,CAACC,aAAL,CAAmB;AAACb,QAAAA,WAAW,EAAEO;AAAd,OAAnB,CAAN;AAEAC,MAAAA,QAAQ,CACJV,KAAK,CAACc,IAAI,CAACb,GAAN,EAAWa,IAAI,CAACZ,WAAhB,CADD,CAAR;AAGH,KARL,EASKc,KATL,CASWC,CAAC,IAAI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAnB,MAAAA,IAAI,CAACsB,IAAL,CAAU,OAAV,EAAmBH,CAAC,CAACI,OAArB,EAA8B,OAA9B;AAEH,KAbL;AAcH,GAfD;AAgBH,CAjBM;AAoBP,OAAO,MAAMC,gBAAgB,GAAC,MAAM;AAChC,SAAOZ,QAAD,IAAc;AAChBhB,IAAAA,QAAQ,CAACiB,IAAT,GAAgBY,eAAhB,CAAiC5B,kBAAjC,EAECkB,IAFD,CAEOW,KAAK,IAAI;AAEZN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACH,KALD;AAMH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAO,OAAMf,QAAN,EAAgBgB,QAAhB,KAA6B;AAChC,UAAMhC,QAAQ,CAACiB,IAAT,GAAgBgB,OAAhB,EAAN,CADgC,CAGhC;AACA;;AACAjB,IAAAA,QAAQ,CAAEkB,MAAM,EAAR,CAAR;AACAlB,IAAAA,QAAQ,CAAEX,UAAU,EAAZ,CAAR;AACH,GAPD;AAQH,CATM;AAWP,OAAO,MAAM6B,MAAM,GAAG,OAAM;AACxBxB,EAAAA,IAAI,EAAEX,KAAK,CAACmC;AADY,CAAN,CAAf","sourcesContent":["import { types } from \"../types/types\"\r\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\r\nimport { startLoading, finishLoading } from \"./ui\";\r\nimport Swal from 'sweetalert2'\r\nimport { emptyNotes } from './notes'\r\n\r\nexport const login = (uid, displayName, photoURL) => ({\r\n    type: types.login,\r\n    payload: {\r\n        uid,\r\n        displayName,\r\n        photoURL    \r\n    }\r\n});\r\n\r\n\r\n// export const startLoginEmailPassword = (email, password) => {\r\n//     return(dispatch) => {\r\n\r\n//         dispatch(startLoading());\r\n//         firebase.auth().signInWithEmailAndPassword(email, password)\r\n//         .then( ({user})  => {\r\n//             dispatch( login(user.uid, user.displayName))\r\n//             dispatch(finishLoading());\r\n\r\n            \r\n//         })\r\n//         .catch(e => {\r\n//             console.log(e);\r\n//             dispatch(finishLoading());\r\n//             Swal.fire('Error', e.message, 'error')\r\n\r\n//         })\r\n\r\n\r\n//     }\r\n// }\r\n\r\nexport const startRegisterWithEmailPasswordName = (email, password, name)=>{\r\n    return( dispatch ) => {\r\n        firebase.auth().createUserWithEmailAndPassword( email, password )\r\n            .then( async ({user}) => {\r\n                \r\n                await user.updateProfile({displayName: name})\r\n                \r\n                dispatch(\r\n                    login(user.uid, user.displayName)\r\n                )\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n                Swal.fire('Error', e.message, 'error')\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const startGoogleLogin=() => {\r\n    return(dispatch) => {\r\n        firebase.auth().signInWithPopup( googleAuthProvider )\r\n        \r\n        .then( state => {\r\n           \r\n            console.log(state)\r\n        })\r\n    }\r\n}\r\n\r\nexport const startLogout = () => {\r\n    return async(dispatch, getState) => {\r\n        await firebase.auth().signOut();\r\n        \r\n        // const {notes} = getState()\r\n        // const {active, notes: note} = notes\r\n        dispatch( logout() )\r\n        dispatch( emptyNotes() )\r\n    }\r\n}\r\n\r\nexport const logout = () =>({\r\n    type: types.logout\r\n})\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}