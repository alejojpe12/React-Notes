{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { db } from \"../firebase/firebase-config\";\nimport { types } from '../types/types';\nimport { loadNotes } from '../helpers/loadNotes';\nimport { fileUpload } from '../helpers/fileUpload';\nexport const startNewNote = () => {\n  return async (dispatch, getState) => {\n    // title\n    const {\n      uid\n    } = getState().auth;\n    const newNote = {\n      title: 'ssadsa',\n      body: '',\n      date: new Date().getTime()\n    };\n    const doc = await db.collection(`${uid}/journal/notes`).add(newNote);\n    dispatch(activeNote(doc.id, newNote));\n    dispatch(addNewNote(doc.id, newNote));\n  };\n};\nexport const activeNote = (id, note) => ({\n  type: types.notesActive,\n  payload: {\n    id,\n    ...note\n  }\n});\nexport const addNewNote = (id, note) => ({\n  type: types.notesAddNew,\n  payload: {\n    id,\n    ...note\n  }\n});\nexport const startLoadingNotes = uid => {\n  return async dispatch => {\n    const notes = await loadNotes(uid);\n    dispatch(setNotes(notes));\n  };\n};\nexport const setNotes = notes => ({\n  type: types.notesLoad,\n  payload: notes\n});\nexport const startSendNote = note => {\n  return async (dispatch, getState) => {\n    // const {uid} = getState().auth\n    const {\n      title\n    } = note;\n    const {\n      body\n    } = note;\n\n    if (!note.url) {\n      delete note.url;\n    }\n\n    const getRandomNumber = (min, max) => {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    const ramdom = getRandomNumber(1000000, 2000000);\n    console.log(ramdom);\n    const noteToFirestore = { ...note\n    };\n    delete noteToFirestore.id;\n    await db.doc(`${title}/journal/notes/${ramdom}`).update(...note);\n    dispatch(refreshNote(note.id, noteToFirestore));\n    Swal.fire('Sended', note.title, 'success');\n  };\n};\nexport const refreshNote = (id, note) => ({\n  type: types.notesUpdated,\n  payload: {\n    id,\n    note: {\n      id,\n      ...note\n    }\n  }\n});\nexport const startUploading = file => {\n  return async (dispatch, getState) => {\n    const {\n      active: activeNote\n    } = getState().notes;\n    Swal.fire({\n      title: 'Uploading...',\n      text: 'Please wait...',\n      allowOutsideClick: false,\n      didOpen: () => {\n        Swal.showLoading();\n      }\n    });\n    const fileUrl = await fileUpload(file);\n    activeNote.url = fileUrl; // dispatch( startSaveNote( activeNote ) )\n\n    Swal.close();\n  };\n};\nexport const startDeleting = id => {\n  return async (dispatch, getState) => {\n    const uid = getState().auth.uid;\n    await db.doc(`${uid}/journal/notes/${id}`).delete();\n    dispatch(deleteNote(id));\n  };\n};\nexport const deleteNote = id => ({\n  type: types.notesDelete,\n  payload: id\n});\nexport const emptyNotes = (notes, active) => ({\n  type: types.notesLogoutCleaning,\n  payload: {\n    active,\n    notes\n  }\n});","map":{"version":3,"sources":["/samba/Journal/src/actions/notes.js"],"names":["Swal","db","types","loadNotes","fileUpload","startNewNote","dispatch","getState","uid","auth","newNote","title","body","date","Date","getTime","doc","collection","add","activeNote","id","addNewNote","note","type","notesActive","payload","notesAddNew","startLoadingNotes","notes","setNotes","notesLoad","startSendNote","url","getRandomNumber","min","max","Math","floor","random","ramdom","console","log","noteToFirestore","update","refreshNote","fire","notesUpdated","startUploading","file","active","text","allowOutsideClick","didOpen","showLoading","fileUrl","close","startDeleting","delete","deleteNote","notesDelete","emptyNotes","notesLogoutCleaning"],"mappings":"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","sourcesContent":["import Swal from 'sweetalert2'\r\n\r\nimport { db } from \"../firebase/firebase-config\";\r\nimport { types } from '../types/types';\r\nimport { loadNotes } from '../helpers/loadNotes'\r\nimport { fileUpload } from '../helpers/fileUpload';\r\n\r\n\r\n\r\nexport const startNewNote = () => {\r\n    return async (dispatch, getState) => {\r\n            // title\r\n        const {uid} = getState().auth\r\n\r\n        const newNote = {\r\n            title: 'ssadsa',\r\n            body: '',\r\n            date: new Date().getTime()\r\n        }\r\n        \r\n        const doc = await db.collection( `${uid}/journal/notes`).add( newNote) \r\n\r\n        dispatch( activeNote( doc.id, newNote) );\r\n        dispatch( addNewNote( doc.id, newNote) );\r\n    }\r\n}\r\n\r\nexport const activeNote = ( id, note ) => ({\r\n\r\n    type: types.notesActive,\r\n    payload: {\r\n        id,\r\n        ...note\r\n    }\r\n});\r\n\r\nexport const addNewNote = ( id, note ) => ({ \r\n    type: types.notesAddNew,\r\n    payload: {\r\n        id, \r\n        ...note\r\n    }\r\n})\r\n\r\n\r\nexport const startLoadingNotes = ( uid ) => {\r\n    return async ( dispatch ) => {\r\n        const notes = await loadNotes( uid );\r\n        dispatch(setNotes(notes));\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setNotes = ( notes ) => ({\r\n    type: types.notesLoad,\r\n    payload: notes \r\n});\r\n\r\n\r\nexport const startSendNote = ( note )=> {\r\n    return async(dispatch, getState) => {\r\n        \r\n        // const {uid} = getState().auth\r\n\r\n        const {title} = note\r\n        const { body } = note\r\n\r\n        if ( !note.url ){\r\n        \r\n            delete note.url;\r\n        }\r\n        const getRandomNumber = (min, max) => {\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n        \r\n        const ramdom = getRandomNumber(1000000, 2000000)\r\n\r\n        console.log(ramdom)\r\n        const noteToFirestore =  { ...note };\r\n        delete noteToFirestore.id;\r\n\r\n        await db.doc(`${title}/journal/notes/${ ramdom }`).update( ...note );\r\n\r\n        dispatch( refreshNote(note.id, noteToFirestore) );\r\n        Swal.fire('Sended', note.title, 'success')\r\n        \r\n    }\r\n}\r\n\r\nexport const refreshNote = ( id, note ) => ({\r\n    type: types.notesUpdated,\r\n    payload: {\r\n        id, \r\n        note: {\r\n            id,\r\n            ...note\r\n        }\r\n    }\r\n});\r\n\r\nexport const startUploading = (file) => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        const { active:activeNote } = getState().notes;\r\n\r\n        Swal.fire({\r\n            title: 'Uploading...',\r\n            text: 'Please wait...',\r\n            allowOutsideClick: false,\r\n            didOpen: () => {\r\n                Swal.showLoading();\r\n            }\r\n        });\r\n\r\n        const fileUrl = await fileUpload(file)\r\n\r\n        activeNote.url= fileUrl;\r\n\r\n        // dispatch( startSaveNote( activeNote ) )\r\n\r\n        Swal.close();\r\n    }\r\n}\r\n\r\nexport const startDeleting = ( id ) => {\r\n    return async (dispatch, getState) => {\r\n        const uid = getState().auth.uid;\r\n        await db.doc(`${ uid }/journal/notes/${ id }`).delete();\r\n\r\n        dispatch( deleteNote(id) );\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const deleteNote = ( id ) => ({\r\n    type: types.notesDelete,\r\n    payload: id,\r\n})\r\n\r\nexport const emptyNotes = (notes, active) => ({\r\n    type: types.notesLogoutCleaning,\r\n    payload: {\r\n        active,\r\n        notes\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}