{"ast":null,"code":"var _jsxFileName = \"/samba/Journal/src/routers/AppRouter.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { firebase } from '../firebase/firebase-config';\nimport { AuthRouter } from './AuthRouter';\nimport { PrivateRoute } from './PrivateRoute';\nimport { JournalScreen } from '../components/journal/JournalScreen';\nimport { login } from '../actions/auth';\nimport { PublicRoute } from './PublicRoute';\nimport { startLoadingNotes } from '../actions/notes';\nexport const AppRouter = () => {\n  const dispatch = useDispatch();\n  const [checking, setChecking] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user === null || user === void 0 ? void 0 : user.uid) {\n        dispatch(login(user.uid, user.displayName));\n        setIsLoggedIn(true);\n        dispatch(startLoadingNotes(user.uid));\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setChecking(false);\n    });\n  }, [dispatch, setChecking, setIsLoggedIn]);\n\n  if (checking) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, \"Wait...\");\n  }\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PublicRoute, {\n    path: \"/auth\",\n    component: AuthRouter,\n    isAuthenticated: isLoggedIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(PrivateRoute, {\n    exact: true,\n    isAuthenticated: isLoggedIn,\n    path: \"/\",\n    component: JournalScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/auth/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }))));\n}; // import { AuthRouter } from './AuthRouter'\n// import { JournalScreen } from '../components/journal/JournalScreen'\n// import { useDispatch, useStore } from 'react-redux'\n// import { loginGoogle } from '../actions/auth'\n// import { PrivateRoute } from './PrivateRoute'\n// import { PublicRoute } from './PublicRoute'\n// import React, { useEffect, useState } from 'react'\n// import { firebase} from '../firebase/firebase-config'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Redirect\n// } from 'react-router-dom'\n// import { LoadingScreen } from '../components/journal/LoadingScreen'\n// import { startLoadingNotes } from '../actions/notes'\n// export const AppRouter = () => {\n//     const dispatch = useDispatch();\n//     const [checking, setChecking] = useState(true)\n//     const [isLoggedIn, setIsLoggedIn] = useState(false)\n//     const {getState} = useStore()\n//     useEffect(()=>{\n//         firebase.auth().onAuthStateChanged( async (user) => {\n//             if(user?.uid) {                \n//             dispatch( loginGoogle(user.uid, user.displayName, user.photoURL))\n//             setIsLoggedIn( true );\n//             dispatch(startLoadingNotes(user.uid));\n//         } else {\n//             setIsLoggedIn( false );\n//         }\n//             setChecking(false);\n//     });\n//     }, [ dispatch, setChecking, setIsLoggedIn])\n//     if(checking) {\n//         return(\n//             <LoadingScreen />\n//         )\n//     }\n//     return (\n//         <Router>\n//             <div>\n//                 <Switch>\n//                     <PublicRoute \n//                         path=\"/react-notes/auth\"\n//                         component={ AuthRouter }\n//                         isAuthenticated={isLoggedIn}\n//                     />\n//                     <PrivateRoute \n//                         exact\n//                         isAuthenticated={isLoggedIn}\n//                         path=\"/react-notes\"\n//                         component={ JournalScreen }\n//                     />\n//                 <Redirect to='/react-notes/auth/login'/>\n//                 </Switch>\n//             </div>\n//         </Router>\n//     )\n// }","map":{"version":3,"sources":["/samba/Journal/src/routers/AppRouter.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Redirect","useDispatch","firebase","AuthRouter","PrivateRoute","JournalScreen","login","PublicRoute","startLoadingNotes","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","auth","onAuthStateChanged","user","uid","displayName"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,MAFJ,EAGIC,QAHJ,QAIS,kBAJT;AAMA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAE3B,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM,CAAEU,QAAF,EAAYC,WAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAAEiB,UAAF,EAAcC,aAAd,IAAgClB,QAAQ,CAAC,KAAD,CAA9C;AAIAD,EAAAA,SAAS,CAAC,MAAM;AAEZO,IAAAA,QAAQ,CAACa,IAAT,GAAgBC,kBAAhB,CAAoC,MAAMC,IAAN,IAAe;AAE/C,UAAKA,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEC,GAAX,EAAiB;AACbR,QAAAA,QAAQ,CAAEJ,KAAK,CAAEW,IAAI,CAACC,GAAP,EAAYD,IAAI,CAACE,WAAjB,CAAP,CAAR;AACAL,QAAAA,aAAa,CAAE,IAAF,CAAb;AACAJ,QAAAA,QAAQ,CAAEF,iBAAiB,CAAES,IAAI,CAACC,GAAP,CAAnB,CAAR;AAEH,OALD,MAKO;AACHJ,QAAAA,aAAa,CAAE,KAAF,CAAb;AACH;;AAEDF,MAAAA,WAAW,CAAC,KAAD,CAAX;AAEH,KAbD;AAeH,GAjBQ,EAiBN,CAAEF,QAAF,EAAYE,WAAZ,EAAyBE,aAAzB,CAjBM,CAAT;;AAoBA,MAAKH,QAAL,EAAgB;AACZ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ;AAGH;;AAGD,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,SAAS,EAAGR,UAFhB;AAGI,IAAA,eAAe,EAAGU,UAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI,oBAAC,YAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,eAAe,EAAGA,UAFtB;AAGI,IAAA,IAAI,EAAC,GAHT;AAII,IAAA,SAAS,EAAGR,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAcI,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADJ,CADJ,CADJ;AAwBH,CA5DM,C,CAkFP;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n  } from 'react-router-dom';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { firebase } from '../firebase/firebase-config'\r\nimport { AuthRouter } from './AuthRouter';\r\nimport { PrivateRoute } from './PrivateRoute';\r\n\r\nimport { JournalScreen } from '../components/journal/JournalScreen';\r\nimport { login } from '../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { startLoadingNotes } from '../actions/notes';\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ checking, setChecking ] = useState(true);\r\n    const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        firebase.auth().onAuthStateChanged( async(user) => {\r\n\r\n            if ( user?.uid ) {\r\n                dispatch( login( user.uid, user.displayName ) );\r\n                setIsLoggedIn( true );\r\n                dispatch( startLoadingNotes( user.uid ) );\r\n\r\n            } else {\r\n                setIsLoggedIn( false );\r\n            }\r\n\r\n            setChecking(false);\r\n\r\n        });\r\n        \r\n    }, [ dispatch, setChecking, setIsLoggedIn ])\r\n\r\n\r\n    if ( checking ) {\r\n        return (\r\n            <h1>Wait...</h1>\r\n        )\r\n    }\r\n\r\n    \r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PublicRoute \r\n                        path=\"/auth\"\r\n                        component={ AuthRouter }\r\n                        isAuthenticated={ isLoggedIn }\r\n                    />\r\n\r\n                    <PrivateRoute \r\n                        exact\r\n                        isAuthenticated={ isLoggedIn }\r\n                        path=\"/\"\r\n                        component={ JournalScreen }\r\n                    />\r\n\r\n                    <Redirect to=\"/auth/login\" />\r\n\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { AuthRouter } from './AuthRouter'\r\n// import { JournalScreen } from '../components/journal/JournalScreen'\r\n// import { useDispatch, useStore } from 'react-redux'\r\n// import { loginGoogle } from '../actions/auth'\r\n// import { PrivateRoute } from './PrivateRoute'\r\n// import { PublicRoute } from './PublicRoute'\r\n\r\n\r\n// import React, { useEffect, useState } from 'react'\r\n// import { firebase} from '../firebase/firebase-config'\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Switch,\r\n//     Redirect\r\n// } from 'react-router-dom'\r\n\r\n// import { LoadingScreen } from '../components/journal/LoadingScreen'\r\n// import { startLoadingNotes } from '../actions/notes'\r\n\r\n\r\n// export const AppRouter = () => {\r\n\r\n//     const dispatch = useDispatch();\r\n    \r\n\r\n//     const [checking, setChecking] = useState(true)\r\n//     const [isLoggedIn, setIsLoggedIn] = useState(false)\r\n//     const {getState} = useStore()\r\n    \r\n//     useEffect(()=>{\r\n        \r\n//         firebase.auth().onAuthStateChanged( async (user) => {\r\n            \r\n//             if(user?.uid) {                \r\n                \r\n//             dispatch( loginGoogle(user.uid, user.displayName, user.photoURL))\r\n\r\n//             setIsLoggedIn( true );\r\n//             dispatch(startLoadingNotes(user.uid));\r\n\r\n\r\n\r\n//         } else {\r\n//             setIsLoggedIn( false );\r\n//         }\r\n\r\n\r\n//             setChecking(false);\r\n\r\n//     });\r\n    \r\n//     }, [ dispatch, setChecking, setIsLoggedIn])\r\n\r\n    \r\n//     if(checking) {\r\n//         return(\r\n//             <LoadingScreen />\r\n//         )\r\n//     }\r\n    \r\n//     return (\r\n//         <Router>\r\n//             <div>\r\n//                 <Switch>\r\n//                     <PublicRoute \r\n//                         path=\"/react-notes/auth\"\r\n//                         component={ AuthRouter }\r\n//                         isAuthenticated={isLoggedIn}\r\n//                     />\r\n\r\n//                     <PrivateRoute \r\n//                         exact\r\n//                         isAuthenticated={isLoggedIn}\r\n//                         path=\"/react-notes\"\r\n//                         component={ JournalScreen }\r\n                        \r\n//                     />\r\n\r\n//                 <Redirect to='/react-notes/auth/login'/>\r\n\r\n//                 </Switch>\r\n//             </div>\r\n//         </Router>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}