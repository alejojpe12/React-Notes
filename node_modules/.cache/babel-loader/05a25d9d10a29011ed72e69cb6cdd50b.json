{"ast":null,"code":"import { types } from \"../types/types\";\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\nimport { startLoading, finishLoading } from \"./ui\";\nimport Swal from 'sweetalert2';\nimport { emptyNotes } from './notes';\nexport const login = (uid, displayName, photoURL) => ({\n  type: types.login,\n  payload: {\n    uid,\n    displayName,\n    photoURL\n  }\n});\nexport const startLoginEmailPassword = (email, password) => {\n  return dispatch => {\n    dispatch(startLoading());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n      dispatch(finishLoading());\n    }).catch(e => {\n      console.log(e);\n      dispatch(finishLoading());\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n      Swal.fire('Error', e.message, 'error');\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(user => {\n      console.log(user.photoURL);\n      dispatch(login(user.uid, user.displayName, user.email));\n    });\n  };\n};\nexport const startLogout = () => {\n  return async (dispatch, getState) => {\n    await firebase.auth().signOut(); // const {notes} = getState()\n    // const {active, notes: note} = notes\n\n    dispatch(logout());\n    dispatch(emptyNotes());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["/samba/Journal/src/actions/auth.js"],"names":["types","firebase","googleAuthProvider","startLoading","finishLoading","Swal","emptyNotes","login","uid","displayName","photoURL","type","payload","startLoginEmailPassword","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","catch","e","console","log","fire","message","startRegisterWithEmailPasswordName","name","createUserWithEmailAndPassword","updateProfile","startGoogleLogin","signInWithPopup","startLogout","getState","signOut","logout"],"mappings":"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","sourcesContent":["import { types } from \"../types/types\"\r\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\r\nimport { startLoading, finishLoading } from \"./ui\";\r\nimport Swal from 'sweetalert2'\r\nimport { emptyNotes } from './notes'\r\n\r\nexport const login = (uid, displayName, photoURL) => ({\r\n    type: types.login,\r\n    payload: {\r\n        uid,\r\n        displayName,\r\n        photoURL\r\n    }\r\n});\r\n\r\n\r\nexport const startLoginEmailPassword = (email, password) => {\r\n    return(dispatch) => {\r\n\r\n        dispatch(startLoading());\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n        .then( ({user})  => {\r\n            dispatch( login(user.uid, user.displayName))\r\n            dispatch(finishLoading());\r\n\r\n            \r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            dispatch(finishLoading());\r\n            Swal.fire('Error', e.message, 'error')\r\n\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const startRegisterWithEmailPasswordName = (email, password, name)=>{\r\n    return( dispatch ) => {\r\n        firebase.auth().createUserWithEmailAndPassword( email, password )\r\n            .then( async ({user}) => {\r\n                \r\n                await user.updateProfile({displayName: name})\r\n                \r\n                dispatch(\r\n                    login(user.uid, user.displayName)\r\n                )\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n                Swal.fire('Error', e.message, 'error')\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const startGoogleLogin=() => {\r\n    return(dispatch) => {\r\n        firebase.auth().signInWithPopup( googleAuthProvider )\r\n        \r\n        .then( user => {\r\n            console.log(user.photoURL)\r\n            dispatch(\r\n                login(user.uid, user.displayName, user.email)\r\n            )  \r\n        })\r\n    }\r\n}\r\n\r\nexport const startLogout = () => {\r\n    return async(dispatch, getState) => {\r\n        await firebase.auth().signOut();\r\n        \r\n        // const {notes} = getState()\r\n        // const {active, notes: note} = notes\r\n        dispatch( logout() )\r\n        dispatch( emptyNotes() )\r\n    }\r\n}\r\n\r\nexport const logout = () =>({\r\n    type: types.logout\r\n})\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}